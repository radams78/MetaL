\documentclass{article}

\title{MetaL --- A Library for Formalised Metatheory in Agda}
\author{Robin Adams}

\usepackage{amsmath}
\usepackage{amsthm}
\usepackage{agda}
\usepackage{catchfilebetweentags}

\DeclareUnicodeCharacter{8759}{\ensuremath{::}}
\DeclareUnicodeCharacter{10023}{\ensuremath{\lozenge}}
\DeclareUnicodeCharacter{10230}{\ensuremath{\longrightarrow}}

\theoremstyle{definition}
\newtheorem{example}{Example}[section]

\begin{document}

\maketitle

\section{Introduction}

%TODO Cite PHOML paper

\section{Design Criteria}

This library was produced with the following design goals.

\begin{itemize}
\item
The library should be \emph{modular}.  There should be a type \AgdaDatatype{Grammar}, and results such as the Substitution Lemma 
%TODO Cross-ref
should be
provable 'once and for all' for all grammars.\footnote{For future versions of the library, we wish to have a type of reduction rules over a grammar, and a type of theories (sets of rules of deduction) over a grammar.}
\item
It should be possible for the user to define their own operations, such as path substitution %TODO Cross-ref
\item
Operations which are defined by induction on expressions should be definable by induction in Agda.  Results which are proved by induction on expressions should be proved by induction in Agda.
\end{itemize}

\section{Grammar}

\begin{example}[Simply Typed Lambda Calculus]
\label{ex:stlc}
For a running example, we will construct the grammar of the simply-typed lambda-calculus, with Church-typing and one constant ground type $\bot$.  On paper, in BNF-style, we write the grammar as follows:
\[ \begin{array}{lrcl}
\text{Type} & A & ::= & \bot \mid A \rightarrow A \\
\text{Term} & M & ::= & x \mid MM \mid \lambda x : A . M
\end{array} \]
\end{example}

\subsection{Taxonomy}

A \emph{taxonomy} is a set of \emph{expression kinds}, divided into \emph{variable kinds} and \emph{non-variable kinds}.
The intention is that the expressions of the grammar are divided into expression kinds.  Every
variable ranges over the expressions of one (and only one) variable kind.

\ExecuteMetaData[Grammar/Taxonomy.tex]{Taxonomy}

An \emph{alphabet} is a finite set of \emph{variables}, to each of which is associated a variable kind.  We write \AgdaDatatype{Var} \AgdaSymbol{V} \AgdaSymbol{K}
for the set of all variables in the alphabet \AgdaSymbol{V} of kind \AgdaSymbol{K}.

\ExecuteMetaData[Grammar/Taxonomy.tex]{Alphabet}
\ExecuteMetaData[Grammar/Taxonomy.tex]{Var}

\begin{example}
For the simply-typed lambda-calculus, there are two expression kinds: \AgdaFunction{type},
which is a non-variable kind, and \AgdaFunction{term}, which is a variable kind:

\ExecuteMetaData[STLC/Grammar.tex]{Taxonomy}
\end{example}

\subsection{Grammar}

An \emph{abstraction kind} has the form $K_1 \rightarrow \cdots \rightarrow K_n \rightarrow L$,
where each $K_i$ is an abstraction kind, and $L$ is an expression kind.

A \emph{constructor kind} has the form $A_1 \rightarrow \cdots \rightarrow A_n \rightarrow K$,
where each $A_i$ is an abstraction kind, and $K$ is an expression kind.

To define these, we introduce the notion of a \emph{simple kind}:
a simple kind over sets $S$ and $T$ is an object of the form $s_1 \rightarrow \cdots \rightarrow s_n \rightarrow t$,
where each $s_i \in S$ and $t \in T$.

\ExecuteMetaData[Grammar/Taxonomy.tex]{SimpleKind}

A \emph{grammar} over a taxonomy consists of:
\begin{itemize}
\item
a set of \emph{constructors}, each with an associated constructor kind;
\item
a function assigning, to each variable kind, an expression kind, called its \emph{parent}.  (The intention is that, when a declaration $x : A$ occurs in a context, if $x$ has kind $K$, then the kind of $A$ is the parent of $K$.)
\end{itemize}

\ExecuteMetaData[Grammar/Base.tex]{Grammar}

\begin{example}
The grammar given in Example \ref{ex:stlc} has four constructors:
\begin{itemize}
 \item
$\bot$, of kind \AgdaFunction{type};
\item
$\rightarrow$, of kind $\AgdaFunction{type} \longrightarrow \AgdaFunction{type} \longrightarrow \AgdaFunction{type}$
\item
\AgdaInductiveConstructor{app}, of kind $\AgdaFunction{term} \longrightarrow \AgdaFunction{term} \longrightarrow \AgdaFunction{term}$
\item
$\lambda$, of kind $\AgdaFunction{type} \longrightarrow (\AgdaFunction{term} \longrightarrow \AgdaFunction{term}) \longrightarrow \AgdaFunction{term}$
\end{itemize}
The kind of the final constructor $\lambda$ should be read like this: $\lambda$ takes a type $A$
and a term $M$, binds a term variable $x$ within $M$, and returns a term $\lambda x:A.M$

\ExecuteMetaData[STLC/Grammar.tex]{Grammar}
\end{example}

\end{document}